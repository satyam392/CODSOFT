def is_safe(board, row, col, n):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, n), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True

def solve_nqueens(board, col, n):
    if col >= n:
        return True

    for row in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            if solve_nqueens(board, col + 1, n):
                return True
            board[row][col] = 0  # Backtrack
    return False

def print_solution(board, n):
    for i in range(n):
        for j in range(n):
            print("Q" if board[i][j] else ".", end=" ")
        print()

def nqueens_backtracking(n):
    board = [[0 for _ in range(n)] for _ in range(n)]
    if solve_nqueens(board, 0, n):
        print_solution(board, n)
    else:
        print("Solution does not exist")

nqueens_backtracking(4)  
